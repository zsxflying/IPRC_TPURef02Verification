$version Generated by VerilatedVcd $end
$timescale 1ps $end

 $scope module TOP $end
  $var wire  1 x clk $end
  $var wire  1 v io_tpu_done $end
  $var wire  1 u io_tpu_start $end
  $var wire  1 w reset $end
  $scope module TPUSimEnv $end
   $var wire  1 x clk $end
   $var wire  1 # io_tpu_done $end
   $var wire  1 u io_tpu_start $end
   $var wire  1 w reset $end
   $var wire  7 & sramD0_io_addr [6:0] $end
   $var wire 32 C sramD0_io_rdata [31:0] $end
   $var wire  7 ' sramD1_io_addr [6:0] $end
   $var wire 32 D sramD1_io_rdata [31:0] $end
   $var wire  4 ( sramRes0_io_addr [3:0] $end
   $var wire  4 ) sramRes1_io_addr [3:0] $end
   $var wire  4 * sramRes2_io_addr [3:0] $end
   $var wire  7 $ sramW0_io_addr [6:0] $end
   $var wire 32 A sramW0_io_rdata [31:0] $end
   $var wire  7 % sramW1_io_addr [6:0] $end
   $var wire 32 B sramW1_io_rdata [31:0] $end
   $var wire 10 - tpu_1_io_sram_raddr_d0 [9:0] $end
   $var wire 10 . tpu_1_io_sram_raddr_d1 [9:0] $end
   $var wire 10 + tpu_1_io_sram_raddr_w0 [9:0] $end
   $var wire 10 , tpu_1_io_sram_raddr_w1 [9:0] $end
   $var wire  6 4 tpu_1_io_sram_waddr_a [5:0] $end
   $var wire  6 : tpu_1_io_sram_waddr_b [5:0] $end
   $var wire  6 @ tpu_1_io_sram_waddr_c [5:0] $end
   $var wire 128 0 tpu_1_io_sram_wdata_a [127:0] $end
   $var wire 128 6 tpu_1_io_sram_wdata_b [127:0] $end
   $var wire 128 < tpu_1_io_sram_wdata_c [127:0] $end
   $var wire  1 / tpu_1_io_sram_write_enable_a $end
   $var wire  1 5 tpu_1_io_sram_write_enable_b $end
   $var wire  1 ; tpu_1_io_sram_write_enable_c $end
   $var wire  1 # tpu_1_io_tpu_done $end
   $scope module sramD0 $end
    $var wire  1 x clk $end
    $var wire  7 & io_addr [6:0] $end
    $var wire 32 C io_rdata [31:0] $end
    $var wire  1 w reset $end
   $upscope $end
   $scope module sramD1 $end
    $var wire  1 x clk $end
    $var wire  7 ' io_addr [6:0] $end
    $var wire 32 D io_rdata [31:0] $end
    $var wire  1 w reset $end
   $upscope $end
   $scope module sramRes0 $end
    $var wire  1 x clk $end
    $var wire  4 ( io_addr [3:0] $end
    $var wire  1 / io_valid $end
    $var wire 128 0 io_wdata [127:0] $end
    $var wire 128 @" mem[0] [127:0] $end
    $var wire 128 h" mem[10] [127:0] $end
    $var wire 128 l" mem[11] [127:0] $end
    $var wire 128 p" mem[12] [127:0] $end
    $var wire 128 t" mem[13] [127:0] $end
    $var wire 128 x" mem[14] [127:0] $end
    $var wire 128 |" mem[15] [127:0] $end
    $var wire 128 D" mem[1] [127:0] $end
    $var wire 128 H" mem[2] [127:0] $end
    $var wire 128 L" mem[3] [127:0] $end
    $var wire 128 P" mem[4] [127:0] $end
    $var wire 128 T" mem[5] [127:0] $end
    $var wire 128 X" mem[6] [127:0] $end
    $var wire 128 \" mem[7] [127:0] $end
    $var wire 128 `" mem[8] [127:0] $end
    $var wire 128 d" mem[9] [127:0] $end
    $var wire  1 w reset $end
   $upscope $end
   $scope module sramRes1 $end
    $var wire  1 x clk $end
    $var wire  4 ) io_addr [3:0] $end
    $var wire  1 5 io_valid $end
    $var wire 128 6 io_wdata [127:0] $end
    $var wire 128 ^! mem[0] [127:0] $end
    $var wire 128 (" mem[10] [127:0] $end
    $var wire 128 ," mem[11] [127:0] $end
    $var wire 128 0" mem[12] [127:0] $end
    $var wire 128 4" mem[13] [127:0] $end
    $var wire 128 8" mem[14] [127:0] $end
    $var wire 128 <" mem[15] [127:0] $end
    $var wire 128 b! mem[1] [127:0] $end
    $var wire 128 f! mem[2] [127:0] $end
    $var wire 128 j! mem[3] [127:0] $end
    $var wire 128 n! mem[4] [127:0] $end
    $var wire 128 r! mem[5] [127:0] $end
    $var wire 128 v! mem[6] [127:0] $end
    $var wire 128 z! mem[7] [127:0] $end
    $var wire 128 ~! mem[8] [127:0] $end
    $var wire 128 $" mem[9] [127:0] $end
    $var wire  1 w reset $end
   $upscope $end
   $scope module sramRes2 $end
    $var wire  1 x clk $end
    $var wire  4 * io_addr [3:0] $end
    $var wire  1 ; io_valid $end
    $var wire 128 < io_wdata [127:0] $end
    $var wire 128 | mem[0] [127:0] $end
    $var wire 128 F! mem[10] [127:0] $end
    $var wire 128 J! mem[11] [127:0] $end
    $var wire 128 N! mem[12] [127:0] $end
    $var wire 128 R! mem[13] [127:0] $end
    $var wire 128 V! mem[14] [127:0] $end
    $var wire 128 Z! mem[15] [127:0] $end
    $var wire 128 "! mem[1] [127:0] $end
    $var wire 128 &! mem[2] [127:0] $end
    $var wire 128 *! mem[3] [127:0] $end
    $var wire 128 .! mem[4] [127:0] $end
    $var wire 128 2! mem[5] [127:0] $end
    $var wire 128 6! mem[6] [127:0] $end
    $var wire 128 :! mem[7] [127:0] $end
    $var wire 128 >! mem[8] [127:0] $end
    $var wire 128 B! mem[9] [127:0] $end
    $var wire  1 w reset $end
   $upscope $end
   $scope module sramW0 $end
    $var wire  1 x clk $end
    $var wire  7 $ io_addr [6:0] $end
    $var wire 32 A io_rdata [31:0] $end
    $var wire  1 w reset $end
   $upscope $end
   $scope module sramW1 $end
    $var wire  1 x clk $end
    $var wire  7 % io_addr [6:0] $end
    $var wire 32 B io_rdata [31:0] $end
    $var wire  1 w reset $end
   $upscope $end
   $scope module tpu_1 $end
    $var wire  1 x clk $end
    $var wire 10 - io_sram_raddr_d0 [9:0] $end
    $var wire 10 . io_sram_raddr_d1 [9:0] $end
    $var wire 10 + io_sram_raddr_w0 [9:0] $end
    $var wire 10 , io_sram_raddr_w1 [9:0] $end
    $var wire 32 C io_sram_rdata_d0 [31:0] $end
    $var wire 32 D io_sram_rdata_d1 [31:0] $end
    $var wire 32 A io_sram_rdata_w0 [31:0] $end
    $var wire 32 B io_sram_rdata_w1 [31:0] $end
    $var wire  6 4 io_sram_waddr_a [5:0] $end
    $var wire  6 : io_sram_waddr_b [5:0] $end
    $var wire  6 @ io_sram_waddr_c [5:0] $end
    $var wire 128 0 io_sram_wdata_a [127:0] $end
    $var wire 128 6 io_sram_wdata_b [127:0] $end
    $var wire 128 < io_sram_wdata_c [127:0] $end
    $var wire  1 / io_sram_write_enable_a $end
    $var wire  1 5 io_sram_write_enable_b $end
    $var wire  1 ; io_sram_write_enable_c $end
    $var wire  1 # io_tpu_done $end
    $var wire  1 u io_tpu_start $end
    $var wire  1 w reset $end
    $var wire 10 - tpuVerilog_sram_raddr_d0 [9:0] $end
    $var wire 10 . tpuVerilog_sram_raddr_d1 [9:0] $end
    $var wire 10 + tpuVerilog_sram_raddr_w0 [9:0] $end
    $var wire 10 , tpuVerilog_sram_raddr_w1 [9:0] $end
    $var wire  6 4 tpuVerilog_sram_waddr_a [5:0] $end
    $var wire  6 : tpuVerilog_sram_waddr_b [5:0] $end
    $var wire  6 @ tpuVerilog_sram_waddr_c [5:0] $end
    $var wire 128 0 tpuVerilog_sram_wdata_a [127:0] $end
    $var wire 128 6 tpuVerilog_sram_wdata_b [127:0] $end
    $var wire 128 < tpuVerilog_sram_wdata_c [127:0] $end
    $var wire  1 / tpuVerilog_sram_write_enable_a0 $end
    $var wire  1 5 tpuVerilog_sram_write_enable_b0 $end
    $var wire  1 ; tpuVerilog_sram_write_enable_c0 $end
    $var wire  1 y tpuVerilog_srstn $end
    $var wire  1 # tpuVerilog_tpu_done $end
    $scope module tpuVerilog $end
     $var wire 32 "# ARRAY_SIZE [31:0] $end
     $var wire 32 "# DATA_WIDTH [31:0] $end
     $var wire 32 %# ORI_WIDTH [31:0] $end
     $var wire 32 $# OUTPUT_DATA_WIDTH [31:0] $end
     $var wire 32 ## SRAM_DATA_WIDTH [31:0] $end
     $var wire  7 E addr_serial_num [6:0] $end
     $var wire  1 P alu_start $end
     $var wire  1 x clk $end
     $var wire  9 Q cycle_num [8:0] $end
     $var wire  2 T data_set [1:0] $end
     $var wire  6 R matrix_index [5:0] $end
     $var wire 168 F ori_data [167:0] $end
     $var wire 128 L quantized_data [127:0] $end
     $var wire 10 - sram_raddr_d0 [9:0] $end
     $var wire 10 . sram_raddr_d1 [9:0] $end
     $var wire 10 + sram_raddr_w0 [9:0] $end
     $var wire 10 , sram_raddr_w1 [9:0] $end
     $var wire 32 C sram_rdata_d0 [31:0] $end
     $var wire 32 D sram_rdata_d1 [31:0] $end
     $var wire 32 A sram_rdata_w0 [31:0] $end
     $var wire 32 B sram_rdata_w1 [31:0] $end
     $var wire  6 4 sram_waddr_a [5:0] $end
     $var wire  6 : sram_waddr_b [5:0] $end
     $var wire  6 @ sram_waddr_c [5:0] $end
     $var wire 128 0 sram_wdata_a [127:0] $end
     $var wire 128 6 sram_wdata_b [127:0] $end
     $var wire 128 < sram_wdata_c [127:0] $end
     $var wire  1 S sram_write_enable $end
     $var wire  1 / sram_write_enable_a0 $end
     $var wire  1 5 sram_write_enable_b0 $end
     $var wire  1 ; sram_write_enable_c0 $end
     $var wire  1 y srstn $end
     $var wire  1 # tpu_done $end
     $var wire  1 u tpu_start $end
     $scope module addr_sel $end
      $var wire  7 E addr_serial_num [6:0] $end
      $var wire  1 x clk $end
      $var wire 10 - sram_raddr_d0 [9:0] $end
      $var wire 10 U sram_raddr_d0_nx [9:0] $end
      $var wire 10 . sram_raddr_d1 [9:0] $end
      $var wire 10 V sram_raddr_d1_nx [9:0] $end
      $var wire 10 + sram_raddr_w0 [9:0] $end
      $var wire 10 U sram_raddr_w0_nx [9:0] $end
      $var wire 10 , sram_raddr_w1 [9:0] $end
      $var wire 10 V sram_raddr_w1_nx [9:0] $end
     $upscope $end
     $scope module quantize $end
      $var wire 32 "# ARRAY_SIZE [31:0] $end
      $var wire 32 "# DATA_WIDTH [31:0] $end
      $var wire 32 %# ORI_WIDTH [31:0] $end
      $var wire 32 $# OUTPUT_DATA_WIDTH [31:0] $end
      $var wire 32 ## SRAM_DATA_WIDTH [31:0] $end
      $var wire 32 (# i [31:0] $end
      $var wire 32 &# max_val [31:0] $end
      $var wire 32 '# min_val [31:0] $end
      $var wire 168 F ori_data [167:0] $end
      $var wire 21 W ori_shifted_data [20:0] $end
      $var wire 128 L quantized_data [127:0] $end
     $upscope $end
     $scope module systolic $end
      $var wire 32 "# ARRAY_SIZE [31:0] $end
      $var wire 32 "# DATA_WIDTH [31:0] $end
      $var wire 32 )# FIRST_OUT [31:0] $end
      $var wire 32 %# OUTCOME_WIDTH [31:0] $end
      $var wire 32 *# PARALLEL_START [31:0] $end
      $var wire 32 ## SRAM_DATA_WIDTH [31:0] $end
      $var wire  1 P alu_start $end
      $var wire  1 x clk $end
      $var wire  9 Q cycle_num [8:0] $end
      $var wire 32 [ i [31:0] $end
      $var wire 32 \ j [31:0] $end
      $var wire  6 Z lower_bound [5:0] $end
      $var wire  6 R matrix_index [5:0] $end
      $var wire 168 F mul_outcome [167:0] $end
      $var wire 16 X mul_result [15:0] $end
      $var wire 32 C sram_rdata_d0 [31:0] $end
      $var wire 32 D sram_rdata_d1 [31:0] $end
      $var wire 32 A sram_rdata_w0 [31:0] $end
      $var wire 32 B sram_rdata_w1 [31:0] $end
      $var wire  1 y srstn $end
      $var wire  6 Y upper_bound [5:0] $end
     $upscope $end
     $scope module systolic_controll $end
      $var wire 32 "# ARRAY_SIZE [31:0] $end
      $var wire  3 +# IDLE [2:0] $end
      $var wire  3 ,# LOAD_DATA [2:0] $end
      $var wire  3 .# ROLLING [2:0] $end
      $var wire  3 -# WAIT1 [2:0] $end
      $var wire  7 E addr_serial_num [6:0] $end
      $var wire  7 { addr_serial_num_nx [6:0] $end
      $var wire  1 P alu_start $end
      $var wire  1 x clk $end
      $var wire  9 Q cycle_num [8:0] $end
      $var wire  9 ` cycle_num_nx [8:0] $end
      $var wire  2 T data_set [1:0] $end
      $var wire  2 ^ data_set_nx [1:0] $end
      $var wire  6 R matrix_index [5:0] $end
      $var wire  6 a matrix_index_nx [5:0] $end
      $var wire  1 S sram_write_enable $end
      $var wire  1 y srstn $end
      $var wire  3 ] state [2:0] $end
      $var wire  3 z state_nx [2:0] $end
      $var wire  1 # tpu_done $end
      $var wire  1 _ tpu_done_nx $end
      $var wire  1 u tpu_start $end
     $upscope $end
     $scope module write_out $end
      $var wire 32 "# ARRAY_SIZE [31:0] $end
      $var wire 32 /# MAX_INDEX [31:0] $end
      $var wire 32 $# OUTPUT_DATA_WIDTH [31:0] $end
      $var wire  1 x clk $end
      $var wire  2 T data_set [1:0] $end
      $var wire 32 b i [31:0] $end
      $var wire  6 R matrix_index [5:0] $end
      $var wire 128 L quantized_data [127:0] $end
      $var wire  6 4 sram_waddr_a [5:0] $end
      $var wire  6 r sram_waddr_a_nx [5:0] $end
      $var wire  6 : sram_waddr_b [5:0] $end
      $var wire  6 s sram_waddr_b_nx [5:0] $end
      $var wire  6 @ sram_waddr_c [5:0] $end
      $var wire  6 t sram_waddr_c_nx [5:0] $end
      $var wire 128 0 sram_wdata_a [127:0] $end
      $var wire 128 f sram_wdata_a_nx [127:0] $end
      $var wire 128 6 sram_wdata_b [127:0] $end
      $var wire 128 j sram_wdata_b_nx [127:0] $end
      $var wire 128 < sram_wdata_c [127:0] $end
      $var wire 128 n sram_wdata_c_nx [127:0] $end
      $var wire  1 S sram_write_enable $end
      $var wire  1 / sram_write_enable_a0 $end
      $var wire  1 c sram_write_enable_a0_nx $end
      $var wire  1 5 sram_write_enable_b0 $end
      $var wire  1 d sram_write_enable_b0_nx $end
      $var wire  1 ; sram_write_enable_c0 $end
      $var wire  1 e sram_write_enable_c0_nx $end
      $var wire  1 y srstn $end
     $upscope $end
    $upscope $end
   $upscope $end
  $upscope $end
 $upscope $end
$enddefinitions $end


#0
0#
b1111111 $
b1111111 %
b1111111 &
b1111111 '
b0000 (
b0000 )
b0000 *
b0001111111 +
b0001111111 ,
b0001111111 -
b0001111111 .
1/
b00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 0
b000000 4
15
b00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 6
b000000 :
1;
b00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 <
b000000 @
b00000000000000000000000000000000 A
b00000000000000000000000000000000 B
b00000000000000000000000000000000 C
b00000000000000000000000000000000 D
b0000010 E
b111010011011000110101001110010010011011010101010111000111110100101011010110010011111011101100011111100111110010001001110010110110000101100100111101010011010000000101001 F
b10000000000000000111111111111111100000000000000010000000000000000111111111111111100000000000000010000000000000000111111111111111 L
1P
b000000000 Q
b000000 R
0S
b00 T
b0000000010 U
b0001111111 V
b111010011011000110101 W
b0000000000000000 X
b000000 Y
b001000 Z
b00000000000000000000000000001000 [
b00000000000000000000000000001000 \
b011 ]
b00 ^
0_
b000000001 `
b000000 a
b00000000000000000000000010000000 b
1c
1d
1e
b00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 f
b00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 j
b00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 n
b000000 r
b000000 s
b000000 t
0u
0v
1w
0x
0y
b011 z
b0000011 {
b00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 |
b00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 "!
b00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 &!
b00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 *!
b00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 .!
b00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 2!
b00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 6!
b00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 :!
b00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 >!
b00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 B!
b00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 F!
b00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 J!
b00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 N!
b00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 R!
b00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 V!
b00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 Z!
b00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 ^!
b00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 b!
b00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 f!
b00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 j!
b00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 n!
b00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 r!
b00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 v!
b00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 z!
b00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 ~!
b00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 $"
b00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 ("
b00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 ,"
b00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 0"
b00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 4"
b00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 8"
b00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 <"
b00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 @"
b00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 D"
b00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 H"
b00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 L"
b00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 P"
b00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 T"
b00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 X"
b00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 \"
b00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 `"
b00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 d"
b00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 h"
b00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 l"
b00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 p"
b00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 t"
b00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 x"
b00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 |"
b00000000000000000000000000001000 "#
b00000000000000000000000000100000 ##
b00000000000000000000000000010000 $#
b00000000000000000000000000010101 %#
b00000000000000000111111111111111 &#
b11111111111111111000000000000000 '#
b00000000000000000000000000001000 (#
b00000000000000000000000000001001 )#
b00000000000000000000000000010001 *#
b000 +#
b001 ,#
b010 -#
b011 .#
b00000000000000000000000000000111 /#
#160
0w
1y
#170
b0000010 $
b0000010 &
b0000000010 +
b0000000010 -
b0000011 E
b000000001 Q
b0000000011 U
b000000010 `
1x
b0000100 {
#175
0x
#180
b0000011 $
b0000011 &
b0000000011 +
b0000000011 -
b0000100 E
b000000010 Q
b0000000100 U
b0000000000 V
b000000011 `
1x
b0000101 {
#185
0x
#190
b0000100 $
b0000000 %
b0000100 &
b0000000 '
b0000000100 +
b0000000000 ,
b0000000100 -
b0000000000 .
b0000101 E
b000000011 Q
b0000000101 U
b0000000001 V
b000000100 `
1x
b0000110 {
#195
0x
#200
b0000101 $
b0000001 %
b0000101 &
b0000001 '
b0000000101 +
b0000000001 ,
b0000000101 -
b0000000001 .
b0000110 E
b000000100 Q
b0000000110 U
b0000000010 V
b000000101 `
1x
b0000111 {
#205
0x
#210
b0000110 $
b0000010 %
b0000110 &
b0000010 '
b0000000110 +
b0000000010 ,
b0000000110 -
b0000000010 .
b0000111 E
b000000101 Q
b0000000111 U
b0000000011 V
b000000110 `
1x
b0001000 {
#215
0x
#220
b0000111 $
b0000011 %
b0000111 &
b0000011 '
b0000000111 +
b0000000011 ,
b0000000111 -
b0000000011 .
b0001000 E
b000000110 Q
b0000001000 U
b0000000100 V
b000000111 `
1x
b0001001 {
#225
0x
#230
b0001000 $
b0000100 %
b0001000 &
b0000100 '
b0000001000 +
b0000000100 ,
b0000001000 -
b0000000100 .
b0001001 E
b000000111 Q
b0000001001 U
b0000000101 V
b000001000 `
1x
b0001010 {
#235
0x
#240
b0001001 $
b0000101 %
b0001001 &
b0000101 '
b0000001001 +
b0000000101 ,
b0000001001 -
b0000000101 .
b0001010 E
b000001000 Q
b0000001010 U
b0000000110 V
b000001001 `
1x
b0001011 {
#245
0x
#250
b0001010 $
b0000110 %
b0001010 &
b0000110 '
b0000001010 +
b0000000110 ,
b0000001010 -
b0000000110 .
b0001011 E
b000001001 Q
1S
b0000001011 U
b0000000111 V
b000001010 `
b000001 a
0c
b01111111111111110000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 f
1x
b0001100 {
#255
0x
#260
b0001011 $
b0000111 %
b0001011 &
b0000111 '
b0000001011 +
b0000000111 ,
b0000001011 -
b0000000111 .
0/
b01111111111111110000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 0
b0001100 E
b101110110001011000101000100010110101111101101000010100110111110011000100011111000110001111100101011001111110110001010110100010001010010100010011101111111110100100010010 F
b10000000000000000111111111111111100000000000000001111111111111110111111111111111100000000000000001111111111111111110100100010010 L
b000001010 Q
b000001 R
b0000001100 U
b0000001000 V
b101110110001011000101 W
b000001 Y
b001001 Z
b000001011 `
b000010 a
b11101001000100100111111111111111000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 f
b000001 r
1x
b0001101 {
#265
0x
#270
b0001100 $
b0001000 %
b0001100 &
b0001000 '
b0001 (
b0000001100 +
b0000001000 ,
b0000001100 -
b0000001000 .
b11101001000100100111111111111111000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 0
b000001 4
b0001101 E
b111000010001100110100101110111010110101100100100110101111111101101111111101000100010110101011100110001010010000000100101110111110110111010010001100001111111110011011111 F
b10000000000000001000000000000000100000000000000010000000000000001000000000000000011111111111111110000000000000000111111111111111 L
b000001011 Q
b000010 R
b0000001101 U
b0000001001 V
b111000010001100110100 W
b000010 Y
b001010 Z
b000001100 `
b000011 a
b01111111111111111000000000000000011111111111111100000000000000000000000000000000000000000000000000000000000000000000000000000000 f
b000010 r
1x
b0001110 {
#275
0x
#280
b0001101 $
b0001001 %
b0001101 &
b0001001 '
b0010 (
b0000001101 +
b0000001001 ,
b0000001101 -
b0000001001 .
b01111111111111111000000000000000011111111111111100000000000000000000000000000000000000000000000000000000000000000000000000000000 0
b000010 4
b0001110 E
b111011110010100110000100101101110001001111011011001101111101011000110001110110110100110100111001000111111010101001100001000000010010111111100100001011000101010111110110 F
b10000000000000001000000000000000011111111111111101111111111111111000000000000000011111111111111101111111111111110111111111111111 L
b000001100 Q
b000011 R
b0000001110 U
b0000001010 V
b111011110010100110000 W
b000011 Y
b001011 Z
b000001101 `
b000100 a
b01111111111111110111111111111111011111111111111110000000000000000000000000000000000000000000000000000000000000000000000000000000 f
b000011 r
1x
b0001111 {
#285
0x
#290
b0001110 $
b0001010 %
b0001110 &
b0001010 '
b0011 (
b0000001110 +
b0000001010 ,
b0000001110 -
b0000001010 .
b01111111111111110111111111111111011111111111111110000000000000000000000000000000000000000000000000000000000000000000000000000000 0
b000011 4
b0001111 E
b011010011110110100001110011001001000000011101001110011010000000100110010100000111111000011110010111011001101011100011101000101100100110011000100101011000110100110000100 F
b01111111111111111000000000000000100000000000000010000000000000000111111111111111100000000000000010000000000000000111111111111111 L
b000001101 Q
b000100 R
b0000001111 U
b0000001011 V
b011010011110110100001 W
b000100 Y
b001100 Z
b000001110 `
b000101 a
b01111111111111111000000000000000100000000000000001111111111111111000000000000000000000000000000000000000000000000000000000000000 f
b000100 r
1x
b0010000 {
#295
0x
#300
b0001111 $
b0001011 %
b0001111 &
b0001011 '
b0100 (
b0000001111 +
b0000001011 ,
b0000001111 -
b0000001011 .
b01111111111111111000000000000000100000000000000001111111111111111000000000000000000000000000000000000000000000000000000000000000 0
b000100 4
b0010000 E
b111111001100110110100010001100001100110000010000011101000001000000111111001100101001000011111100000011001101001110000100100011101100011101010010001000000010011001101011 F
b10011001101101000111111111111111011111111111111101111111111111110111111111111111100000000000000010000000000000000010011001101011 L
b000001110 Q
b000101 R
b0000010000 U
b0000001100 V
b111111001100110110100 W
b000101 Y
b001101 Z
b000001111 `
b000110 a
b00100110011010111000000000000000100000000000000001111111111111110111111111111111011111111111111100000000000000000000000000000000 f
b000101 r
1x
b0010001 {
#305
0x
#310
b0010000 $
b0001100 %
b0010000 &
b0001100 '
b0101 (
b0000010000 +
b0000001100 ,
b0000010000 -
b0000001100 .
b00100110011010111000000000000000100000000000000001111111111111110111111111111111011111111111111100000000000000000000000000000000 0
b000101 4
b0010001 E
b010001000011111011101110001101111000110000111110110100000111101011111010100110001100010100111000111111101101000001110100010101101111111111111001010011000001111110010111 F
b01111111111111111000000000000000100000000000000001111111111111110111111111111111100000000000000010000000000000000111111111111111 L
b000001111 Q
b000110 R
b0000010001 U
b0000001101 V
b010001000011111011101 W
b000110 Y
b001110 Z
b000010000 `
b000111 a
b01111111111111111000000000000000100000000000000001111111111111110111111111111111100000000000000010000000000000000000000000000000 f
b000110 r
1x
b0010010 {
#315
0x
#320
b0010001 $
b0001101 %
b0010001 &
b0001101 '
b0110 (
b0000010001 +
b0000001101 ,
b0000010001 -
b0000001101 .
b01111111111111111000000000000000100000000000000001111111111111110111111111111111100000000000000010000000000000000000000000000000 0
b000110 4
b0010010 E
b110011011000011011011110111101111011011000111001110001010101010000110011000100101110001101110010100010100100000011010001111001101001111000100101110101011001101100001110 F
b10000000000000001000000000000000100000000000000001111111111111110111111111111111100000000000000010000000000000001000000000000000 L
b000010000 Q
b000111 R
b0000010010 U
b0000001110 V
b110011011000011011011 W
b000111 Y
b001111 Z
b000010001 `
b001000 a
b10000000000000001000000000000000100000000000000001111111111111110111111111111111100000000000000010000000000000001000000000000000 f
b000111 r
1x
b0010011 {
#325
0x
#330
b0010010 $
b0001110 %
b0010010 &
b0001110 '
b0111 (
b0000010010 +
b0000001110 ,
b0000010010 -
b0000001110 .
b10000000000000001000000000000000100000000000000001111111111111110111111111111111100000000000000010000000000000001000000000000000 0
b000111 4
b0010011 E
b111010011011000110101001110010010011011010101010111000111110100101011010110010011111011101100011111100111110010001001110010110110000101100100111101000000000000000000000 F
b10000000000000000111111111111111100000000000000010000000000000000111111111111111100000000000000010000000000000000000000000000000 L
b000010001 Q
b001000 R
b0000010011 U
b0000001111 V
b111010011011000110101 W
b000000 Y
b001000 Z
b000010010 `
b001001 a
0d
b10000000000000001000000000000000011111111111111110000000000000001000000000000000011111111111111110000000000000000000000000000000 f
b001000 r
1x
b0010100 {
#335
0x
#340
b0010011 $
b0001111 %
b0010011 &
b0001111 '
b1000 (
b0000010011 +
b0000001111 ,
b0000010011 -
b0000001111 .
b10000000000000001000000000000000011111111111111110000000000000001000000000000000011111111111111110000000000000000000000000000000 0
b001000 4
05
b0010100 E
b101110110001011000101000100010110101111101101000010100110111110011000100011111000110001111100101011001111110110001010110100010000000000000000000000000000000000000000000 F
b10000000000000000111111111111111100000000000000001111111111111110111111111111111100000000000000000000000000000000000000000000000 L
b000010010 Q
b001001 R
b0000010100 U
b0000010000 V
b101110110001011000101 W
b000001 Y
b001001 Z
b000010011 `
b001010 a
b10000000000000000111111111111111011111111111111110000000000000000111111111111111100000000000000000000000000000000000000000000000 f
b001001 r
b000001 s
1x
b0010101 {
#345
0x
#350
b0010100 $
b0010000 %
b0010100 &
b0010000 '
b1001 (
b0001 )
b0000010100 +
b0000010000 ,
b0000010100 -
b0000010000 .
b10000000000000000111111111111111011111111111111110000000000000000111111111111111100000000000000000000000000000000000000000000000 0
b001001 4
b000001 :
b0010101 E
b111000010001100110100101110111010110101100100100110101111111101101111111101000100010110101011100110001010000000000000000000000000000000000000000000000000000000000000000 F
b10000000000000001000000000000000100000000000000010000000000000001000000000000000000000000000000000000000000000000000000000000000 L
b000010011 Q
b001010 R
b0000010101 U
b0000010001 V
b111000010001100110100 W
b000010 Y
b001010 Z
b000010100 `
b001011 a
b10000000000000001000000000000000100000000000000010000000000000001000000000000000000000000000000000000000000000000000000000000000 f
b001010 r
b000010 s
1x
b0010110 {
#355
0x
#360
#361
